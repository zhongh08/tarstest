// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.haowei.tarstest.tars.testapp;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class BillRsp {

	@TarsStructProperty(order = 0, isRequire = true)
	public RspHeader rspHeader = null;
	@TarsStructProperty(order = 1, isRequire = true)
	public java.util.List<Bill> billList = null;
	@TarsStructProperty(order = 2, isRequire = false)
	public PageUtils pageUtils = null;

	public RspHeader getRspHeader() {
		return rspHeader;
	}

	public void setRspHeader(RspHeader rspHeader) {
		this.rspHeader = rspHeader;
	}

	public java.util.List<Bill> getBillList() {
		return billList;
	}

	public void setBillList(java.util.List<Bill> billList) {
		this.billList = billList;
	}

	public PageUtils getPageUtils() {
		return pageUtils;
	}

	public void setPageUtils(PageUtils pageUtils) {
		this.pageUtils = pageUtils;
	}

	public BillRsp() {
	}

	public BillRsp(RspHeader rspHeader, java.util.List<Bill> billList, PageUtils pageUtils) {
		this.rspHeader = rspHeader;
		this.billList = billList;
		this.pageUtils = pageUtils;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(rspHeader);
		result = prime * result + TarsUtil.hashCode(billList);
		result = prime * result + TarsUtil.hashCode(pageUtils);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof BillRsp)) {
			return false;
		}
		BillRsp other = (BillRsp) obj;
		return (
			TarsUtil.equals(rspHeader, other.rspHeader) &&
			TarsUtil.equals(billList, other.billList) &&
			TarsUtil.equals(pageUtils, other.pageUtils) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(rspHeader, 0);
		_os.write(billList, 1);
		if (null != pageUtils) {
			_os.write(pageUtils, 2);
		}
	}

	static RspHeader cache_rspHeader;
	static { 
		cache_rspHeader = new RspHeader();
	}
	static java.util.List<Bill> cache_billList;
	static { 
		cache_billList = new java.util.ArrayList<Bill>();
		Bill var_1 = new Bill();
		cache_billList.add(var_1);
	}
	static PageUtils cache_pageUtils;
	static { 
		cache_pageUtils = new PageUtils();
	}

	public void readFrom(TarsInputStream _is) {
		this.rspHeader = (RspHeader) _is.read(cache_rspHeader, 0, true);
		this.billList = (java.util.List<Bill>) _is.read(cache_billList, 1, true);
		this.pageUtils = (PageUtils) _is.read(cache_pageUtils, 2, false);
	}

}
